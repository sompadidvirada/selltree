// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Employye {
  id          Int      @id @unique @default(autoincrement())
  username    String
  password    String?
  phonenumber String
  position    String
  image       String
  point       Int
  createAt    DateTime @default(now())
  status      Boolean  @default(true)
  brach       brach?   @relation(fields: [brachId], references: [id])
  brachId     Int?
}

model Customer {
  id          Int            @id @default(autoincrement())
  username    String
  image       String?
  phonenumber String
  password    String?
  createAt    DateTime       @default(now())
  bill        CustomerBill[]
  point       points?
}

model CustomerBill {
  id         Int       @id @unique @default(autoincrement())
  createAt   DateTime  @default(now())
  totalMenu  Int?
  status     Boolean   @default(true)
  update     DateTime?
  Customer   Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId Int
}

model Products {
  id          Int        @id @unique @default(autoincrement())
  name        String
  image       String
  price       Int
  size        String
  Categorys   Categorys? @relation(fields: [categorysId], references: [id])
  categorysId Int?
}

model Categorys {
  id       Int        @id @unique @default(autoincrement())
  name     String
  products Products[]
  createAt DateTime   @default(now())
}

model points {
  id         Int       @id @default(autoincrement())
  point      Int       @default(0)
  updateAt   DateTime?
  customerId Int       @unique
  customer   Customer  @relation(fields: [customerId], references: [id])
}

model brach {
  id        Int         @id @unique @default(autoincrement())
  name      String
  employyee Employye[]
  wairoder  waitOrder[]
}

model waitOrder {
  id      Int    @id @unique @default(autoincrement())
  brach   brach @relation(fields: [brachId], references: [id])
  brachId Int
  waitNumber  Int 
  createAt DateTime @default(now())
}
